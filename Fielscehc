link_generator.py

#(¬©)Codexbotz

from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from bot import Bot
from pyrogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from asyncio import TimeoutError
from helper_func import encode, get_message_id, admin

@Bot.on_message(filters.private & admin & filters.command('batch'))
async def batch(client: Client, message: Message):
    while True:
        try:
            first_message = await client.ask(text="Forward the First Message from any DB Channel (with Quotes)..\n\nor Send the DB Channel Post Link", chat_id=message.from_user.id, filters=(filters.forwarded | (filters.text & ~filters.forwarded)), timeout=60)
        except:
            return
        f_msg_id = await get_message_id(client, first_message)
        if f_msg_id:
            # Identify the DB channel
            db_channels = await db.show_db_channels()
            db_channel_id = None
            if first_message.forward_from_chat:
                for ch_id in db_channels:
                    if first_message.forward_from_chat.id == ch_id:
                        db_channel_id = ch_id
                        break
            elif first_message.text:
                pattern = "https://t.me/(?:c/)?(.*)/(\d+)"
                matches = re.match(pattern, first_message.text)
                if matches:
                    channel_id = matches.group(1)
                    for ch_id in db_channels:
                        chat = await client.get_chat(ch_id)
                        if channel_id.isdigit():
                            if f"-100{channel_id}" == str(ch_id):
                                db_channel_id = ch_id
                                break
                        else:
                            if channel_id == chat.username.lstrip('@'):
                                db_channel_id = ch_id
                                break
            if db_channel_id:
                break
        await first_message.reply("‚ùå Error\n\nThis Forwarded Post or Link is not from any of my DB Channels.", quote=True)
        continue

    while True:
        try:
            second_message = await client.ask(text="Forward the Last Message from the same DB Channel (with Quotes)..\nor Send the DB Channel Post link", chat_id=message.from_user.id, filters=(filters.forwarded | (filters.text & ~filters.forwarded)), timeout=60)
        except:
            return
        s_msg_id = await get_message_id(client, second_message)
        if s_msg_id:
            # Verify it's from the same DB channel
            if second_message.forward_from_chat and second_message.forward_from_chat.id == db_channel_id:
                break
            elif second_message.text:
                pattern = "https://t.me/(?:c/)?(.*)/(\d+)"
                matches = re.match(pattern, second_message.text)
                if matches:
                    channel_id = matches.group(1)
                    chat = await client.get_chat(db_channel_id)
                    if channel_id.isdigit():
                        if f"-100{channel_id}" == str(db_channel_id):
                            break
                    else:
                        if channel_id == chat.username.lstrip('@'):
                            break
        await second_message.reply("‚ùå Error\n\nThis Forwarded Post or Link is not from the same DB Channel.", quote=True)
        continue

    string = f"get-{db_channel_id}-{f_msg_id * abs(db_channel_id)}-{s_msg_id * abs(db_channel_id)}"
    base64_string = await encode(string)
    link = f"https://t.me/{client.username}?start={base64_string}"
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ Share URL", url=f'https://telegram.me/share/url?url={link}')]])
    await second_message.reply_text(f"<b>Here is your link</b>\n\n{link}", quote=True, reply_markup=reply_markup)

@Bot.on_message(filters.private & admin & filters.command('genlink'))
async def link_generator(client: Client, message: Message):
    while True:
        try:
            channel_message = await client.ask(text="Forward Message from any DB Channel (with Quotes)..\nor Send the DB Channel Post link", chat_id=message.from_user.id, filters=(filters.forwarded | (filters.text & ~filters.forwarded)), timeout=60)
        except:
            return
        msg_id = await get_message_id(client, channel_message)
        if msg_id:
            # Identify the DB channel
            db_channels = await db.show_db_channels()
            db_channel_id = None
            if channel_message.forward_from_chat:
                for ch_id in db_channels:
                    if channel_message.forward_from_chat.id == ch_id:
                        db_channel_id = ch_id
                        break
            elif channel_message.text:
                pattern = "https://t.me/(?:c/)?(.*)/(\d+)"
                matches = re.match(pattern, channel_message.text)
                if matches:
                    channel_id = matches.group(1)
                    for ch_id in db_channels:
                        chat = await client.get_chat(ch_id)
                        if channel_id.isdigit():
                            if f"-100{channel_id}" == str(ch_id):
                                db_channel_id = ch_id
                                break
                        else:
                            if channel_id == chat.username.lstrip('@'):
                                db_channel_id = ch_id
                                break
            if db_channel_id:
                break
        await channel_message.reply("‚ùå Error\n\nThis Forwarded Post or Link is not from any of my DB Channels.", quote=True)
        continue

    string = f"get-{db_channel_id}-{msg_id * abs(db_channel_id)}"
    base64_string = await encode(string)
    link = f"https://t.me/{client.username}?start={base64_string}"
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ Share URL", url=f'https://telegram.me/share/url?url={link}')]])
    await channel_message.reply_text(f"<b>Here is your link</b>\n\n{link}", quote=True, reply_markup=reply_markup)

@Bot.on_message(filters.private & admin & filters.command("custom_batch"))
async def custom_batch(client: Client, message: Message):
    collected = []
    STOP_KEYBOARD = ReplyKeyboardMarkup([["STOP"]], resize_keyboard=True)
    db_channel_id = None

    # Ask for the DB channel to store messages
    while True:
        try:
            db_choice = await client.ask(text="Forward a message from the DB Channel you want to store messages in..\nor Send the DB Channel Link", chat_id=message.from_user.id, filters=(filters.forwarded | (filters.text & ~filters.forwarded)), timeout=60)
        except:
            return
        db_channels = await db.show_db_channels()
        if db_choice.forward_from_chat:
            for ch_id in db_channels:
                if db_choice.forward_from_chat.id == ch_id:
                    db_channel_id = ch_id
                    break
        elif db_choice.text:
            pattern = "https://t.me/(?:c/)?(.*)/(\d+)"
            matches = re.match(pattern, db_choice.text)
            if matches:
                channel_id = matches.group(1)
                for ch_id in db_channels:
                    chat = await client.get_chat(ch_id)
                    if channel_id.isdigit():
                        if f"-100{channel_id}" == str(ch_id):
                            db_channel_id = ch_id
                            break
                    else:
                        if channel_id == chat.username.lstrip('@'):
                            db_channel_id = ch_id
                            break
        if db_channel_id:
            break
        await db_choice.reply("‚ùå Error\n\nPlease select a valid DB Channel.", quote=True)
        continue

    await message.reply("Send all messages you want to include in batch.\n\nPress STOP when you're done.", reply_markup=STOP_KEYBOARD)

    while True:
        try:
            user_msg = await client.ask(
                chat_id=message.chat.id,
                text="Waiting for files/messages...\nPress STOP to finish.",
                timeout=60
            )
        except asyncio.TimeoutError:
            break

        if user_msg.text and user_msg.text.strip().upper() == "STOP":
            break

        try:
            sent = await user_msg.copy(db_channel_id, disable_notification=True)
            collected.append(sent.id)
        except Exception as e:
            await message.reply(f"‚ùå Failed to store a message:\n<code>{e}</code>")
            continue

    await message.reply("‚úÖ Batch collection complete.", reply_markup=ReplyKeyboardRemove())

    if not collected:
        await message.reply("‚ùå No messages were added to batch.")
        return

    start_id = collected[0] * abs(db_channel_id)
    end_id = collected[-1] * abs(db_channel_id)
    string = f"get-{db_channel_id}-{start_id}-{end_id}"
    base64_string = await encode(string)
    link = f"https://t.me/{client.username}?start={base64_string}"

    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ Share URL", url=f'https://telegram.me/share/url?url={link}')]])
    await message.reply(f"<b>Here is your custom batch link:</b>\n\n{link}", reply_markup=reply_markup)



helper_fucn.py

#(¬©)CodeFlix_Bots
#rohit_1888 on Tg #Dont remove this line

import base64
import re
import asyncio
import time
from pyrogram import filters
from pyrogram.enums import ChatMemberStatus
from config import *
from pyrogram.errors.exceptions.bad_request_400 import UserNotParticipant
from shortzy import Shortzy
from pyrogram.errors import FloodWait
from database.database import *

async def check_admin(filter, client, update):
    try:
        user_id = update.from_user.id       
        return any([user_id == OWNER_ID, await db.admin_exist(user_id)])
    except Exception as e:
        print(f"! Exception in check_admin: {e}")
        return False

async def is_subscribed(client, user_id):
    channel_ids = await db.show_channels()
    if not channel_ids:
        return True
    if user_id == OWNER_ID:
        return True
    for cid in channel_ids:
        if not await is_sub(client, user_id, cid):
            mode = await db.get_channel_mode(cid)
            if mode == "on":
                await asyncio.sleep(2)
                if await is_sub(client, user_id, cid):
                    continue
            return False
    return True

async def is_sub(client, user_id, channel_id):
    try:
        member = await client.get_chat_member(channel_id, user_id)
        status = member.status
        return status in {
            ChatMemberStatus.OWNER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.MEMBER
        }
    except UserNotParticipant:
        mode = await db.get_channel_mode(channel_id)
        if mode == "on":
            exists = await db.req_user_exist(channel_id, user_id)
            return exists
        return False
    except Exception as e:
        print(f"[!] Error in is_sub(): {e}")
        return False

async def encode(string):
    string_bytes = string.encode("ascii")
    base64_bytes = base64.urlsafe_b64encode(string_bytes)
    base64_string = (base64_bytes.decode("ascii")).strip("=")
    return base64_string

async def decode(base64_string):
    base64_string = base64_string.strip("=")
    base64_bytes = (base64_string + "=" * (-len(base64_string) % 4)).encode("ascii")
    string_bytes = base64.urlsafe_b64decode(base64_bytes) 
    string = string_bytes.decode("ascii")
    return string

async def get_messages(client, message_ids, db_channel_id):
    messages = []
    total_messages = 0
    while total_messages != len(message_ids):
        temb_ids = message_ids[total_messages:total_messages+200]
        try:
            msgs = await client.get_messages(
                chat_id=db_channel_id,
                message_ids=temb_ids
            )
        except FloodWait as e:
            await asyncio.sleep(e.x)
            msgs = await client.get_messages(
                chat_id=db_channel_id,
                message_ids=temb_ids
            )
        except:
            pass
        total_messages += len(temb_ids)
        messages.extend(msgs)
    return messages

async def get_message_id(client, message):
    db_channels = await db.show_db_channels()
    if not db_channels:
        return 0
    for db_channel_id in db_channels:
        try:
            chat = await client.get_chat(db_channel_id)
            if message.forward_from_chat:
                if message.forward_from_chat.id == db_channel_id:
                    return message.forward_from_message_id
                else:
                    continue
            elif message.forward_sender_name:
                continue
            elif message.text:
                pattern = "https://t.me/(?:c/)?(.*)/(\d+)"
                matches = re.match(pattern, message.text)
                if not matches:
                    continue
                channel_id = matches.group(1)
                msg_id = int(matches.group(2))
                if channel_id.isdigit():
                    if f"-100{channel_id}" == str(db_channel_id):
                        return msg_id
                else:
                    if channel_id == chat.username.lstrip('@'):
                        return msg_id
        except Exception as e:
            print(f"Error checking db_channel {db_channel_id}: {e}")
            continue
    return 0

def get_readable_time(seconds: int) -> str:
    count = 0
    up_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]
    while count < 4:
        count += 1
        remainder, result = divmod(seconds, 60) if count < 3 else divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)
    hmm = len(time_list)
    for x in range(hmm):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        up_time += f"{time_list.pop()}, "
    time_list.reverse()
    up_time += ":".join(time_list)
    return up_time

def get_exp_time(seconds):
    periods = [('days', 86400), ('hours', 3600), ('mins', 60), ('secs', 1)]
    result = ''
    for period_name, period_seconds in periods:
        if seconds >= period_seconds:
            period_value, seconds = divmod(seconds, period_seconds)
            result += f'{int(period_value)} {period_name}'
    return result

async def get_shortlink(url, api, link):
    shortzy = Shortzy(api_key=api, base_site=url)
    link = await shortzy.convert(link)
    return link

subscribed = filters.create(is_subscribed)
admin = filters.create(check_admin)



database.py
#Codeflix_Botz
#rohit_1888 on Tg

import motor, asyncio
import motor.motor_asyncio
import time
import pymongo, os
from config import DB_URI, DB_NAME
import logging
from datetime import datetime, timedelta

dbclient = pymongo.MongoClient(DB_URI)
database = dbclient[DB_NAME]

logging.basicConfig(level=logging.INFO)

default_verify = {
    'is_verified': False,
    'verified_time': 0,
    'verify_token': "",
    'link': ""
}

def new_user(id):
    return {
        '_id': id,
        'verify_status': {
            'is_verified': False,
            'verified_time': "",
            'verify_token': "",
            'link': ""
        }
    }

class Rohit:

    def __init__(self, DB_URI, DB_NAME):
        self.dbclient = motor.motor_asyncio.AsyncIOMotorClient(DB_URI)
        self.database = self.dbclient[DB_NAME]

        self.channel_data = self.database['channels']
        self.admins_data = self.database['admins']
        self.user_data = self.database['users']
        self.sex_data = self.database['sex']
        self.banned_user_data = self.database['banned_user']
        self.autho_user_data = self.database['autho_user']
        self.del_timer_data = self.database['del_timer']
        self.fsub_data = self.database['fsub']   
        self.rqst_fsub_data = self.database['request_forcesub']
        self.rqst_fsub_Channel_data = self.database['request_forcesub_channel']
        self.db_channels_data = self.database['db_channels']  # New collection for DB channels

    # USER DATA
    async def present_user(self, user_id: int):
        found = await self.user_data.find_one({'_id': user_id})
        return bool(found)

    async def add_user(self, user_id: int):
        await self.user_data.insert_one({'_id': user_id})
        return

    async def full_userbase(self):
        user_docs = await self.user_data.find().to_list(length=None)
        user_ids = [doc['_id'] for doc in user_docs]
        return user_ids

    async def del_user(self, user_id: int):
        await self.user_data.delete_one({'_id': user_id})
        return

    # ADMIN DATA
    async def admin_exist(self, admin_id: int):
        found = await self.admins_data.find_one({'_id': admin_id})
        return bool(found)

    async def add_admin(self, admin_id: int):
        if not await self.admin_exist(admin_id):
            await self.admins_data.insert_one({'_id': admin_id})
            return

    async def del_admin(self, admin_id: int):
        if await self.admin_exist(admin_id):
            await self.admins_data.delete_one({'_id': admin_id})
            return

    async def get_all_admins(self):
        users_docs = await self.admins_data.find().to_list(length=None)
        user_ids = [doc['_id'] for doc in users_docs]
        return user_ids

    # BAN USER DATA
    async def ban_user_exist(self, user_id: int):
        found = await self.banned_user_data.find_one({'_id': user_id})
        return bool(found)

    async def add_ban_user(self, user_id: int):
        if not await self.ban_user_exist(user_id):
            await self.banned_user_data.insert_one({'_id': user_id})
            return

    async def del_ban_user(self, user_id: int):
        if await self.ban_user_exist(user_id):
            await self.banned_user_data.delete_one({'_id': user_id})
            return

    async def get_ban_users(self):
        users_docs = await self.banned_user_data.find().to_list(length=None)
        user_ids = [doc['_id'] for doc in users_docs]
        return user_ids

    # AUTO DELETE TIMER SETTINGS
    async def set_del_timer(self, value: int):        
        existing = await self.del_timer_data.find_one({})
        if existing:
            await self.del_timer_data.update_one({}, {'$set': {'value': value}})
        else:
            await self.del_timer_data.insert_one({'value': value})

    async def get_del_timer(self):
        data = await self.del_timer_data.find_one({})
        if data:
            return data.get('value', 600)
        return 0

    # CHANNEL MANAGEMENT
    async def channel_exist(self, channel_id: int):
        found = await self.fsub_data.find_one({'_id': channel_id})
        return bool(found)

    async def add_channel(self, channel_id: int):
        if not await self.channel_exist(channel_id):
            await self.fsub_data.insert_one({'_id': channel_id})
            return

    async def rem_channel(self, channel_id: int):
        if await self.channel_exist(channel_id):
            await self.fsub_data.delete_one({'_id': channel_id})
            return

    async def show_channels(self):
        channel_docs = await self.fsub_data.find().to_list(length=None)
        channel_ids = [doc['_id'] for doc in channel_docs]
        return channel_ids
    
    # Get current mode of a channel
    async def get_channel_mode(self, channel_id: int):
        data = await self.fsub_data.find_one({'_id': channel_id})
        return data.get("mode", "off") if data else "off"

    # Set mode of a channel
    async def set_channel_mode(self, channel_id: int, mode: str):
        await self.fsub_data.update_one(
            {'_id': channel_id},
            {'$set': {'mode': mode}},
            upsert=True
        )

    # DATABASE CHANNEL MANAGEMENT
    async def db_channel_exist(self, channel_id: int):
        found = await self.db_channels_data.find_one({'_id': channel_id})
        return bool(found)

    async def add_db_channel(self, channel_id: int):
        if not await self.db_channel_exist(channel_id):
            await self.db_channels_data.insert_one({'_id': channel_id})
            return

    async def rem_db_channel(self, channel_id: int):
        if await self.db_channel_exist(channel_id):
            await self.db_channels_data.delete_one({'_id': channel_id})
            return

    async def show_db_channels(self):
        channel_docs = await self.db_channels_data.find().to_list(length=None)
        channel_ids = [doc['_id'] for doc in channel_docs]
        return channel_ids

    # REQUEST FORCE-SUB MANAGEMENT
    async def req_user(self, channel_id: int, user_id: int):
        try:
            await self.rqst_fsub_Channel_data.update_one(
                {'_id': int(channel_id)},
                {'$addToSet': {'user_ids': int(user_id)}},
                upsert=True
            )
        except Exception as e:
            print(f"[DB ERROR] Failed to add user to request list: {e}")

    async def del_req_user(self, channel_id: int, user_id: int):
        await self.rqst_fsub_Channel_data.update_one(
            {'_id': channel_id}, 
            {'$pull': {'user_ids': user_id}}
        )

    async def req_user_exist(self, channel_id: int, user_id: int):
        try:
            found = await self.rqst_fsub_Channel_data.find_one({
                '_id': int(channel_id),
                'user_ids': int(user_id)
            })
            return bool(found)
        except Exception as e:
            print(f"[DB ERROR] Failed to check request list: {e}")
            return False  

    async def reqChannel_exist(self, channel_id: int):
        channel_ids = await self.show_channels()
        if channel_id in channel_ids:
            return True
        else:
            return False

    # VERIFICATION MANAGEMENT
    async def db_verify_status(self, user_id):
        user = await self.user_data.find_one({'_id': user_id})
        if user:
            return user.get('verify_status', default_verify)
        return default_verify

    async def db_update_verify_status(self, user_id, verify):
        await self.user_data.update_one({'_id': user_id}, {'$set': {'verify_status': verify}})

    async def get_verify_status(self, user_id):
        verify = await self.db_verify_status(user_id)
        return verify

    async def update_verify_status(self, user_id, verify_token="", is_verified=False, verified_time=0, link=""):
        current = await self.db_verify_status(user_id)
        current['verify_token'] = verify_token
        current['is_verified'] = is_verified
        current['verified_time'] = verified_time
        current['link'] = link
        await self.db_update_verify_status(user_id, current)

    # Set verify count (overwrite with new value)
    async def set_verify_count(self, user_id: int, count: int):
        await self.sex_data.update_one({'_id': user_id}, {'$set': {'verify_count': count}}, upsert=True)

    # Get verify count (default to 0 if not found)
    async def get_verify_count(self, user_id: int):
        user = await self.sex_data.find_one({'_id': user_id})
        if user:
            return user.get('verify_count', 0)
        return 0

    # Reset all users' verify counts to 0
    async def reset_all_verify_counts(self):
        await self.sex_data.update_many(
            {},
            {'$set': {'verify_count': 0}} 
        )

    # Get total verify count across all users
    async def get_total_verify_count(self):
        pipeline = [
            {"$group": {"_id": None, "total": {"$sum": "$verify_count"}}}
        ]
        result = await self.sex_data.aggregate(pipeline).to_list(length=1)
        return result[0]["total"] if result else 0

db = Rohit(DB_URI, DB_NAME)




start.py

# Don't Remove Credit @CodeFlix_Bots, @rohit_1888
# Ask Doubt on telegram @CodeflixSupport
#
# Copyright (C) 2025 by Codeflix-Bots@Github, < https://github.com/Codeflix-Bots >.
#
# This file is part of < https://github.com/Codeflix-Bots/FileStore > project,
# and is released under the MIT License.
# Please see < https://github.com/Codeflix-Bots/FileStore/blob/master/LICENSE >
#
# All rights reserved.
#

import asyncio
import os
import random
import sys
import re
import string 
import string as rohit
import time
from datetime import datetime, timedelta
from pyrogram import Client, filters, __version__
from pyrogram.enums import ParseMode, ChatAction
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, ChatInviteLink, ChatPrivileges
from pyrogram.errors.exceptions.bad_request_400 import UserNotParticipant
from pyrogram.errors import FloodWait, UserIsBlocked, InputUserDeactivated, UserNotParticipant
from bot import Bot
from config import *
from helper_func import *
from database.database import *
from database.db_premium import *

BAN_SUPPORT = f"{BAN_SUPPORT}"
TUT_VID = f"{TUT_VID}"

async def short_url(client: Client, message: Message, base64_string):
    try:
        prem_link = f"https://t.me/{client.username}?start=yu3elk{base64_string}7"
        short_link = await get_shortlink(SHORTLINK_URL, SHORTLINK_API, prem_link)

        buttons = [
            [
                InlineKeyboardButton(text="·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö", url=short_link),
                InlineKeyboardButton(text="·¥õ·¥ú·¥õ·¥è Ä…™·¥Ä ü", url=TUT_VID)
            ],
            [
                InlineKeyboardButton(text="·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", callback_data="premium")
            ]
        ]

        await message.reply_photo(
            photo=SHORTENER_PIC,
            caption=SHORT_MSG.format(),
            reply_markup=InlineKeyboardMarkup(buttons),
        )

    except IndexError:
        pass

@Bot.on_message(filters.command('start') & filters.private)
async def start_command(client: Client, message: Message):
    user_id = message.from_user.id
    id = message.from_user.id
    is_premium = await is_premium_user(id)

    # Check if user is banned
    banned_users = await db.get_ban_users()
    if user_id in banned_users:
        return await message.reply_text(
            "<b>‚õîÔ∏è You are B·¥Ä…¥…¥·¥á·¥Ö from using this bot.</b>\n\n"
            "<i>Contact support if you think this is a mistake.</i>",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("Contact Support", url=BAN_SUPPORT)]]
            )
        )

    # ‚úÖ Check Force Subscription
    if not await is_subscribed(client, user_id):
        return await not_joined(client, message)

    # File auto-delete time in seconds
    FILE_AUTO_DELETE = await db.get_del_timer()

    # Add user if not already present
    if not await db.present_user(user_id):
        try:
            await db.add_user(user_id)
        except:
            pass

    # Handle normal message flow
    text = message.text

    if len(text) > 7:
        try:
            basic = text.split(" ", 1)[1]
            if basic.startswith("yu3elk"):
                base64_string = basic[6:-1]
            else:
                base64_string = basic

            if not is_premium and user_id != OWNER_ID and not basic.startswith("yu3elk"):
                await short_url(client, message, base64_string)
                return

        except Exception as e:
            print(f"Error processing start payload: {e}")

        string = await decode(base64_string)
        argument = string.split("-")

        ids = []
        db_channel_id = None
        if len(argument) == 4:  # Batch link: get-<db_channel_id>-<start>-<end>
            try:
                db_channel_id = int(argument[1])
                if db_channel_id not in await db.show_db_channels():
                    await message.reply_text("Invalid database channel.")
                    return
                start = int(int(argument[2]) / abs(db_channel_id))
                end = int(int(argument[3]) / abs(db_channel_id))
                ids = range(start, end + 1) if start <= end else list(range(start, end - 1, -1))
            except Exception as e:
                print(f"Error decoding IDs: {e}")
                return

        elif len(argument) == 3:  # Single message: get-<db_channel_id>-<msg_id>
            try:
                db_channel_id = int(argument[1])
                if db_channel_id not in await db.show_db_channels():
                    await message.reply_text("Invalid database channel.")
                    return
                ids = [int(int(argument[2]) / abs(db_channel_id))]
            except Exception as e:
                print(f"Error decoding ID: {e}")
                return

        temp_msg = await message.reply("<b>Please wait...</b>")
        try:
            messages = await get_messages(client, ids, db_channel_id)
        except Exception as e:
            await message.reply_text("Something went wrong!")
            print(f"Error getting messages: {e}")
            return
        finally:
            await temp_msg.delete()

        codeflix_msgs = []
        for msg in messages:
            caption = (CUSTOM_CAPTION.format(previouscaption="" if not msg.caption else msg.caption.html, 
                                             filename=msg.document.file_name) if bool(CUSTOM_CAPTION) and bool(msg.document)
                       else ("" if not msg.caption else msg.caption.html))

            reply_markup = msg.reply_markup if DISABLE_CHANNEL_BUTTON else None

            try:
                copied_msg = await msg.copy(chat_id=message.from_user.id, caption=caption, parse_mode=ParseMode.HTML, 
                                            reply_markup=reply_markup, protect_content=PROTECT_CONTENT)
                codeflix_msgs.append(copied_msg)
            except FloodWait as e:
                await asyncio.sleep(e.x)
                copied_msg = await msg.copy(chat_id=message.from_user.id, caption=caption, parse_mode=ParseMode.HTML, 
                                            reply_markup=reply_markup, protect_content=PROTECT_CONTENT)
                codeflix_msgs.append(copied_msg)
            except Exception as e:
                print(f"Failed to send message: {e}")
                pass

        if FILE_AUTO_DELETE > 0:
            notification_msg = await message.reply(
                f"<b>T ú…™s F…™ ü·¥á ·¥°…™ ü ü  ô·¥á D·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥  {get_exp_time(FILE_AUTO_DELETE)}. P ü·¥á·¥Äs·¥á s·¥Ä·¥†·¥á ·¥è Ä “ì·¥è Ä·¥°·¥Ä Ä·¥Ö …™·¥õ ·¥õ·¥è  è·¥è·¥ú Ä s·¥Ä·¥†·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás  ô·¥á“ì·¥è Ä·¥á …™·¥õ …¢·¥á·¥õs D·¥á ü·¥á·¥õ·¥á·¥Ö.</b>"
            )

            await asyncio.sleep(FILE_AUTO_DELETEAny)

            for snt_msg in codeflix_msgs:    
                if snt_msg:
                    try:    
                        await snt_msg.delete()  
                    except Exception as e:
                        print(f"Error deleting message {snt_msg.id}: {e}")

            try:
                reload_url = (
                    f"https://t.me/{client.username}?start={message.command[1]}"
                    if message.command and len(message.command) > 1
                    else None
                )
                keyboard = InlineKeyboardMarkup(
                    [[InlineKeyboardButton("…¢·¥á·¥õ “ì…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥!", url=reload_url)]]
                ) if reload_url else None

                await notification_msg.edit(
                    "<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!\n\n·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á üëá</b>",
                    reply_markup=keyboard
                )
            except Exception as e:
                print(f"Error updating notification with 'Get File Again' button: {e}")
    else:
        reply_markup = InlineKeyboardMarkup(
            [
                [InlineKeyboardButton("‚Ä¢ ·¥ç·¥è Ä·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üs ‚Ä¢", url="https://t.me/Nova_Flix/50")],
                [
                    InlineKeyboardButton("‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ", callback_data="about"),
                    InlineKeyboardButton(' ú·¥á ü·¥ò ‚Ä¢', callback_data="help")
                ]
            ]
        )
        await message.reply_photo(
            photo=START_PIC,
            caption=START_MSG.format(
                first=message.from_user.first_name,
                last=message.from_user.last_name,
                username=None if not message.from_user.username else '@' + message.from_user.username,
                mention=message.from_user.mention,
                id=message.from_user.id
            ),
            reply_markup=reply_markup,
            message_effect_id=5104841245755180586)  # üî•
        
        return

# Command to set a database channel
@Bot.on_message(filters.command('setdbchannel') & filters.private & admin)
async def set_db_channel(client: Client, message: Message):
    if len(message.command) != 2:
        await message.reply_text("Usage: /setdbchannel <channel_id>\nExample: /setdbchannel -1001234567890")
        return
    try:
        channel_id = int(message.command[1])
        if await db.db_channel_exist(channel_id):
            await message.reply_text("This channel is already set as a database channel.")
            return
        await db.add_db_channel(channel_id)
        await message.reply_text(f"Database channel {channel_id} added successfully.")
    except ValueError:
        await message.reply_text("Invalid channel ID. Please provide a valid numeric channel ID (e.g., -1001234567890).")
    except Exception as e:
        await message.reply_text(f"Error: {str(e)}")

# Command to remove a database channel
@Bot.on_message(filters.command('removedbchannel') & filters.private & admin)
async def remove_db_channel(client: Client, message: Message):
    if len(message.command) != 2:
        await message.reply_text("Usage: /removedbchannel <channel_id>\nExample: /removedbchannel -1001234567890")
        return
    try:
        channel_id = int(message.command[1])
        if not await db.db_channel_exist(channel_id):
            await message.reply_text("This channel is not set as a database channel.")
            return
        await db.rem_db_channel(channel_id)
        await message.reply_text(f"Database channel {channel_id} removed successfully.")
    except ValueError:
        await message.reply_text("Invalid channel ID. Please provide a valid numeric channel ID (e.g., -1001234567890).")
    except Exception as e:
        await message.reply_text(f"Error: {str(e)}")

# Command to list database channels
@Bot.on_message(filters.command('listdbchannels') & filters.private & admin)
async def list_db_channels(client: Client, message: Message):
    db_channels = await db.show_db_channels()
    if not db_channels:
        await message.reply_text("No database channels are set.")
        return
    channel_list = "\n".join([f"‚Ä¢ {ch_id}" for ch_id in db_channels])
    await message.reply_text(f"Current database channels:\n{channel_list}")

async def not_joined(client: Client, message: Message):
    temp = await message.reply("<b><i>Checking Subscription...</i></b>")

    user_id = message.from_user.id
    buttons = []
    count = 0

    try:
        all_channels = await db.show_channels()  # Should return list of (chat_id, mode) tuples
        for total, chat_id in enumerate(all_channels, start=1):
            mode = await db.get_channel_mode(chat_id)  # fetch mode 

            await message.reply_chat_action(ChatAction.TYPING)

            if not await is_sub(client, user_id, chat_id):
                try:
                    # Cache chat info
                    if chat_id in chat_data_cache:
                        data = chat_data_cache[chat_id]
                    else:
                        data = await client.get_chat(chat_id)
                        chat_data_cache[chat_id] = data

                    name = data.title

                    # Generate proper invite link based on the mode
                    if mode == "on" and not data.username:
                        invite = await client.create_chat_invite_link(
                            chat_id=chat_id,
                            creates_join_request=True,
                            expire_date=datetime.utcnow() + timedelta(seconds=FSUB_LINK_EXPIRY) if FSUB_LINK_EXPIRY else None
                            )
                        link = invite.invite_link

                    else:
                        if data.username:
                            link = f"https://t.me/{data.username}"
                        else:
                            invite = await client.create_chat_invite_link(
                                chat_id=chat_id,
                                expire_date=datetime.utcnow() + timedelta(seconds=FSUB_LINK_EXPIRY) if FSUB_LINK_EXPIRY else None)
                            link = invite.invite_link

                    buttons.append([InlineKeyboardButton(text=name, url=link)])
                    count += 1
                    await temp.edit(f"<b>{'! ' * count}</b>")

                except Exception as e:
                    print(f"Error with chat {chat_id}: {e}")
                    return await temp.edit(
                        f"<b><i>! E Ä Ä·¥è Ä, C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ·¥õ·¥è s·¥è ü·¥†·¥á ·¥õ ú·¥á …™ss·¥ú·¥ás @rohit_1888</i></b>\n"
                        f"<blockquote expandable><b>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>"
                    )

        # Retry Button
        try:
            buttons.append([
                InlineKeyboardButton(
                    text='‚ôªÔ∏è T Ä è A…¢·¥Ä…™…¥',
                    url=f"https://t.me/{client.username}?start={message.command[1]}"
                )
            ])
        except IndexError:
            pass

        await message.reply_photo(
            photo=FORCE_PIC,
            caption=FORCE_MSG.format(
                first=message.from_user.first_name,
                last=message.from_user.last_name,
                username=None if not message.from_user.username else '@' + message.from_user.username,
                mention=message.from_user.mention,
                id=message.from_user.id
            ),
            reply_markup=InlineKeyboardMarkup(buttons),
        )

    except Exception as e:
        print(f"Final Error: {e}")
        await temp.edit(
            f"<b><i>! E Ä Ä·¥è Ä, C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä ·¥õ·¥è s·¥è ü·¥†·¥á ·¥õ ú·¥á …™ss·¥ú·¥ás @rohit_1888</i></b>\n"
            f"<blockquote expandable><b>R·¥á·¥Äs·¥è…¥:</b> {e}</blockquote>"
        )

@Bot.on_message(filters.command('myplan') & filters.private)
async def check_plan(client: Client, message: Message):
    user_id = message.from_user.id  # Get user ID from the message
    status_message = await check_user_plan(user_id)
    await message.reply(status_message)

@Bot.on_message(filters.command('addpremium') & filters.private & admin)
async def add_premium_user_command(client, msg):
    if len(msg.command) != 4:
        await msg.reply_text(
            "Usage: /addpremium <user_id> <time_value> <time_unit>\n\n"
            "Time Units:\n"
            "s - seconds\n"
            "m - minutes\n"
            "h - hours\n"
            "d - days\n"
            "y - years\n\n"
            "Examples:\n"
            "/addpremium 123456789 30 m ‚Üí 30 minutes\n"
            "/addpremium 123456789 2 h ‚Üí 2 hours\n"
            "/addpremium 123456789 1 d ‚Üí 1 day\n"
            "/addpremium 123456789 1 y ‚Üí 1 year"
        )
        return
    try:
        user_id = int(msg.command[1])
        time_value = int(msg.command[2])
        time_unit = msg.command[3].lower()
        expiration_time = await add_premium(user_id, time_value, time_unit)
        await msg.reply_text(
            f"‚úÖ User `{user_id}` added as a premium user for {time_value} {time_unit}.\n"
            f"Expiration Time: `{expiration_time}`"
        )
        await client.send_message(
            chat_id=user_id,
            text=(
                f"üéâ Premium Activated!\n\n"
                f"You have received premium access for `{time_value} {time_unit}`.\n"
                f"Expires on: `{expiration_time}`"
            ),
        )
    except ValueError:
        await msg.reply_text("‚ùå Invalid input. Please ensure user ID and time value are numbers.")
    except Exception as e:
        await msg.reply_text(f"‚ö†Ô∏è An error occurred: `{str(e)}`")

@Bot.on_message(filters.command('remove_premium') & filters.private & admin)
async def pre_remove_user(client: Client, msg: Message):
    if len(msg.command) != 2:
        await msg.reply_text("useage: /remove_premium user_id ")
        return
    try:
        user_id = int(msg.command[1])
        await remove_premium(user_id)
        await msg.reply_text(f"User {user_id} has been removed.")
    except ValueError:
        await msg.reply_text("user_id must be an integer or not available in database.")

@Bot.on_message(filters.command('premium_users') & filters.private & admin)
async def list_premium_users_command(client, message):
    from pytz import timezone
    ist = timezone("Asia/Kolkata")
    premium_users_cursor = collection.find({})
    premium_user_list = ['Active Premium Users in database:']
    current_time = datetime.now(ist)
    async for user in premium_users_cursor:
        user_id = user["user_id"]
        expiration_timestamp = user["expiration_timestamp"]
        try:
            expiration_time = datetime.fromisoformat(expiration_timestamp).astimezone(ist)
            remaining_time = expiration_time - current_time
            if remaining_time.total_seconds() <= 0:
                await collection.delete_one({"user_id": user_id})
                continue
            user_info = await client.get_users(user_id)
            username = user_info.username if user_info.username else "No Username"
            first_name = user_info.first_name
            mention=user_info.mention
            days, hours, minutes, seconds = (
                remaining_time.days,
                remaining_time.seconds // 3600,
                (remaining_time.seconds // 60) % 60,
                remaining_time.seconds % 60,
            )
            expiry_info = f"{days}d {hours}h {minutes}m {seconds}s left"
            premium_user_list.append(
                f"UserID: <code>{user_id}</code>\n"
                f"User: @{username}\n"
                f"Name: {mention}\n"
                f"Expiry: {expiry_info}"
            )
        except Exception as e:
            premium_user_list.append(
                f"UserID: <code>{user_id}</code>\n"
                f"Error: Unable to fetch user details ({str(e)})"
            )
    if len(premium_user_list) == 1:
        await message.reply_text("I found 0 active premium users in my DB")
    else:
        await message.reply_text("\n\n".join(premium_user_list), parse_mode=None)

@Bot.on_message(filters.command("count") & filters.private & admin)
async def total_verify_count_cmd(client, message: Message):
    total = await db.get_total_verify_count()
    await message.reply_text(f"T·¥è·¥õ·¥Ä ü ·¥†·¥á Ä…™“ì…™·¥á·¥Ö ·¥õ·¥è·¥ã·¥á…¥s ·¥õ·¥è·¥Ö·¥Ä è: <b>{total}</b>")

@Bot.on_message(filters.command('commands') & filters.private & admin)
async def bcmd(bot: Bot, message: Message):        
    reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close")]])
    await message.reply(text=CMD_TXT, reply_markup=reply_markup, quote=True)
